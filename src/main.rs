use std::{io::Write, path::Path};

use bytemuck::{Pod, Zeroable};
use rand::{rngs::ThreadRng, Rng, RngCore};

const BYTES_PER_SPLAT: usize = 8;
const SPLATS: usize = 500;

const WIDTH: usize = 512;
const HEIGHT: usize = 512;

#[derive(Clone, Copy, Pod, Zeroable)]
#[repr(C)]
struct Splat([u8; BYTES_PER_SPLAT]);

fn modify(rng: &mut ThreadRng, data: &[Splat; SPLATS]) -> [Splat; SPLATS] {
	const RAND_MAGNITUDE: u8 = 128;

	// TODO: avoid this copy
	let mut new_data = *data;

	for _ in 0..10 {
		let chosen_splat = rng.gen_range(0usize..500);

		let splat = &mut new_data[chosen_splat];

		for s in &mut splat.0 {
			*s = s.wrapping_add(rng.gen_range(0..RAND_MAGNITUDE));
		}
	}

	new_data
}

fn compute_mse(image1: &[u8], image2: &[u8]) -> f64 {
	let mut sum = 0.0;

	for i in 0..image1.len() {
		let diff = image1[i] as f64 - image2[i] as f64;
		sum += diff * diff;
	}

	sum / image1.len() as f64
}

// float gaussian( in vec2 p, in vec2 c, vec2 r, float a, float anim )
// {
// p -= c                               + anim*250.0*cos( 0.5*iTime + 10.0*c.yx
// ); float an = float(a)*(6.283185/256.0) + anim*0.01*c.x;
// float co = cos(an);
// float si = sin(an);
// p = mat2x2(co,-si,si,co)*p;
// p /= r;
// return exp( -4.0*dot(p,p) );
// }
fn gaussian(mut p: [u32; 2], c: [u32; 2], r: [u32; 2], a: u32) -> f64 {
	p[0] = p[0].wrapping_sub(c[0]);
	p[1] = p[1].wrapping_sub(c[1]);

	let an = a as f64 * (std::f64::consts::TAU / 256.0);
	let co = an.cos();
	let si = an.sin();

	let x = co * p[0] as f64 - si * p[1] as f64;
	let y = si * p[0] as f64 + co * p[1] as f64;

	let x = x / r[0] as f64;
	let y = y / r[1] as f64;

	(-4.0 * (x * x + y * y)).exp()
}

// gaussian falloff at center c, radii r and angle a.
// float gaussian( in vec2 p, in vec2 c, vec2 r, float a, float anim )
// {
// p -= c                               + anim*250.0*cos( 0.5*iTime + 10.0*c.yx
// ); float an = float(a)*(6.283185/256.0) + anim*0.01*c.x;
// float co = cos(an);
// float si = sin(an);
// p = mat2x2(co,-si,si,co)*p;
// p /= r;
// return exp( -4.0*dot(p,p) );
// }
//
// uint clamp8( uint x ) // clamp x to [0..255], respecting under/overflow
// direction {
// return ((x&0xffffff00u)==0u) ? x : ((x>>31)-1u)&0xffu;
// }
//
// void mainImage( out vec4 fragColor, in vec2 fragCoord )
// {
// image coordinates
// vec2 p = 256.0 + 256.0*(2.0*fragCoord-iResolution.xy)/iResolution.y;
//
// animation
// float t    = mod( max(0.0,iTime-0.1), 12.0 );
// int   base = int( max(0.0,500.0-125.0*t) );
// float anim = smoothstep( 1.0, 0.0, abs(t-8.0) );
//
// background color
// vec3 col = vec3(255.0);
//
// 500 gaussians splats
// for( int i=base; i<500; i++ )
// {
// read 8 bytes per gaussian
// uint whag = data[2*i+0];
// uint xyrb = data[2*i+1];
//
// unpack data
// uint x = (xyrb>> 0)&511u; // position x : 9 bits
// uint y = (xyrb>> 9)&511u; // position y : 9 bits
// uint w = (whag>> 0)&255u; // width      : 8 bits
// uint h = (whag>> 8)&255u; // height     : 8 bits
// uint a = (whag>>16)&255u; // angle      : 8 bits
// uint g = (whag>>24)&255u; // green      : 8 bits
// uint u = (xyrb>>16)&508u; // red-green  : 7 bits
// uint v = (xyrb>>23)&508u; // blue-green : 7 bits
// uint r = clamp8(g+u-256u);
// uint b = clamp8(g+v-256u);
//
// compute gaussian
// float f = gaussian( p, vec2(x,y), vec2(w,h), float(a), anim );
//
// splat it
// col = mix( col, vec3(r,g,b), f );
// }
//
// frame
// if( abs(p.x-256.0)>255.0 ) col = vec3(0.0);
//
// fragColor = vec4(col/255.0,1.0);
// }
fn render_image(data: &[u32]) -> [u8; WIDTH * HEIGHT * 3] {
	let mut image = [0u8; WIDTH * HEIGHT * 3];

	let mut rng = rand::thread_rng();

	for y in 0..HEIGHT {
		for x in 0..WIDTH {
			let p = [x as u32, y as u32];

			let mut col = [255u8; 3];

			for i in 0..SPLATS {
				let whag = data[i * 2];
				let xyrb = data[i * 2 + 1];

				let x = (xyrb >> 0) & 511;
				let y = (xyrb >> 9) & 511;
				let w = (whag >> 0) & 255;
				let h = (whag >> 8) & 255;
				let a = (whag >> 16) & 255;
				let g = (whag >> 24) & 255;
				let u = (xyrb >> 16) & 508;
				let v = (xyrb >> 23) & 508;
				let r = (g as i32 + u as i32 - 256).max(0).min(255) as u8;
				let b = (g as i32 + v as i32 - 256).max(0).min(255) as u8;

				let f = gaussian(p, [x, y], [w, h], a);

				for i in 0..3 {
					col[i] = (col[i] as f64 * (1.0 - f) + [r, g as u8, b][i] as f64 * f) as u8;
				}
			}

			if (p[0] as i32 - 256).abs() > 255 {
				col = [0, 0, 0];
			}

			image[(y * WIDTH + x) * 3 + 0] = col[0];
			image[(y * WIDTH + x) * 3 + 1] = col[1];
			image[(y * WIDTH + x) * 3 + 2] = col[2];
		}
	}

	image
}

const DATA: [u32; SPLATS * 2] = [
	0x003b55ff, 0x810992c6, 0x0fcdff07, 0xc6f12a17, 0x008e3eff, 0x8500ce3f, 0x018e0bfd, 0x8efd586a,
	0x004cff29, 0x8100ee22, 0x003c9cfe, 0x8101b10e, 0x0c75b904, 0x7b09c1ab, 0x05cbff0e, 0x7ef92429,
	0x000dabff, 0x8100108c, 0x405d180e, 0x619afa30, 0x00a90a51, 0x814e5bc0, 0xf1e804a7, 0x48b5a935,
	0x000efe50, 0x81fcd6e4, 0x0000930c, 0x8903b056, 0x0087fd88, 0x8100f329, 0x44c66f17, 0x7fb54919,
	0x011323fa, 0x80fd2468, 0x000d65f8, 0x81009462, 0x2893fd0a, 0x6cee4f52, 0x00294186, 0x81024979,
	0x4d381e42, 0x59b2b9c7, 0x01c50446, 0x8103f5af, 0x018d18ff, 0x80fd122a, 0x006f033c, 0x8501ab9d,
	0x2174ab36, 0x7175f37d, 0xffcdd005, 0x81015445, 0x947aed6d, 0x576bcb40, 0x01d6d1d1, 0x7f380d75,
	0x1242042f, 0x83079fb4, 0x009bab5e, 0x8101ecf6, 0x053b6e28, 0x7d4eeb7a, 0x0bc93bfa, 0x7b79974e,
	0x0d2852c9, 0x79f346c3, 0xf4438809, 0x8509bf1e, 0x0175eb17, 0x7f5d878e, 0x0068c786, 0x8100253d,
	0x00bd0244, 0x81033db3, 0x0091074c, 0x811f373b, 0x00b30c36, 0x814697d7, 0x0084fd19, 0x81015ccc,
	0x006d8011, 0x81736a71, 0x95b23380, 0x376af074, 0x008e78fa, 0x8100869b, 0x008f0452, 0x81031f3c,
	0x09880465, 0x7b2b2a89, 0xffcb7b03, 0x81014c40, 0x0041a625, 0x8926cb42, 0x608fb112, 0x69883ae1,
	0x9425070e, 0x871dd128, 0x10c3045e, 0x7f335046, 0x01420bcd, 0x7effbfaa, 0x42ba3418, 0x64cb68a7,
	0x20b40231, 0x7cf9ddb2, 0x0060481a, 0x8117a747, 0x52e3eb17, 0x65abfcc2, 0x1b8f27c9, 0x73e09975,
	0x794d125f, 0x613904c4, 0x17820876, 0x75170e9c, 0x00020636, 0x81133964, 0x6b773977, 0x4d4fb2d0,
	0x03c115d2, 0x7eff591e, 0x003bfe14, 0x83016fae, 0x0047a104, 0x81033928, 0x40951402, 0x6ec19069,
	0xb31e920b, 0x554f537c, 0xbb7f04a5, 0x7341b2f0, 0x89e43a0b, 0x5b76e036, 0x13018519, 0x7773ec6b,
	0x00b506d8, 0x81019f4f, 0x00c226f7, 0x810ba38e, 0x0176217d, 0x7efd6795, 0x1bd917b9, 0x7aefe87f,
	0x00750a45, 0x830193a7, 0x5e88b60e, 0x5b4a367f, 0x26b50346, 0x80fa11b8, 0xed8d0a4c, 0x731356a9,
	0x00940904, 0x8105b921, 0x24d21be2, 0x6f93de89, 0x8c540b66, 0x733888d3, 0xffc44d08, 0x81016c73,
	0x0d41c133, 0x78f51dac, 0xff09023c, 0x80dd6069, 0xff080465, 0x81016670, 0xf7fe6643, 0x80ffd815,
	0x26883413, 0x6d56e7d5, 0x80e60d2d, 0x6756283d, 0x08122502, 0x7d8db261, 0x3a83c807, 0x83375e4a,
	0xcab50737, 0x7b356f51, 0x00fb289e, 0x811137f0, 0x4c3d0b37, 0x675ea826, 0x31902b05, 0x75425425,
	0x005b25d2, 0x8301e363, 0x00083113, 0x813337a4, 0xe73b3106, 0x791b04a4, 0x0aa5dc18, 0x7b575722,
	0xa2ca089e, 0x6d5f3ec8, 0x00670f3c, 0x815b21b7, 0x00f40c30, 0x810b2565, 0x55d31576, 0x59aa285a,
	0x7ef1fe8a, 0xa0c003ff, 0x01b60cd2, 0x7f05c4c2, 0x121c0d56, 0x77c6312d, 0x32bd1c02, 0x94e983ff,
	0x746e1003, 0x75506528, 0xff03041f, 0x7f01b300, 0x2c3a0f2a, 0x7142de2f, 0x98861b0a, 0x7b5936df,
	0x15a41403, 0x7f260e3d, 0x00ee21f5, 0x810034dc, 0x00f62503, 0x811e95e0, 0x00d2ff06, 0x8114db5d,
	0x0c9b0623, 0x7b4335be, 0x01b409df, 0x90fd7b9a, 0x0c025e27, 0x7be72780, 0x9e471bb1, 0x515bb974,
	0x833e080b, 0x8b29cce6, 0x00452d42, 0x810ff984, 0x00f50310, 0x8302004a, 0xd4cc0a6c, 0x3b2bff79,
	0x00c211e3, 0x8103b9a4, 0xe6aa3a08, 0x6ce7b88c, 0x9ff61144, 0x6b546aff, 0xfecd0724, 0x66ff74a4,
	0xfb5324a3, 0x4d0746e3, 0xfec46c07, 0x750300ac, 0x60952905, 0x7d2f1fdc, 0x080e05e0, 0x82fd7294,
	0xf63c3e05, 0x790af36c, 0x00a30610, 0x81230e2e, 0x5126730a, 0x695b1cd1, 0x8f050767, 0x6169eedc,
	0x00a21a2b, 0x81037275, 0x9e86901f, 0x575bfc8f, 0xb2513313, 0x8729311a, 0x0082db06, 0x8d03b246,
	0xafb40542, 0x9d4f3c4d, 0x00e01315, 0x812f23cb, 0xffd7390b, 0x7f03c2e2, 0xee511905, 0x6313ab44,
	0x2928100a, 0x79633dce, 0xe2767108, 0x6b1d354b, 0x67f31812, 0x599a65c6, 0x14924c07, 0x8541c663,
	0xcbbd470b, 0x693740a7, 0x00bcb9ad, 0x81002bf4, 0x00af4b05, 0x810706d0, 0xda260b1b, 0x432725c4,
	0x0904f309, 0x873f8850, 0xffd00846, 0x710130cd, 0x006a9d0b, 0x8102c51b, 0x8f11350d, 0x5b5e5a3e,
	0x02c39329, 0x7f83dd20, 0x5a75680c, 0x658ee648, 0x7bbd1206, 0x7f49d8fc, 0x26690613, 0x73530e3e,
	0x0016213d, 0x810fd27b, 0x17912803, 0x88edc45e, 0x00fd0554, 0x81172ac5, 0x19e1171a, 0x738f1bc9,
	0x0e81bb04, 0x7f033bb3, 0x134105f7, 0x86fffe45, 0xf80f046a, 0x65070ed3, 0x85470b22, 0x6566f5de,
	0x00068bf0, 0x8100101b, 0x9dd46f0c, 0x635384a7, 0x18c18033, 0x75c50f1b, 0x63381531, 0x717520e6,
	0x3a7f3f80, 0x63ba8a9c, 0x2cbc9004, 0x96f181fa, 0x00370422, 0x8101a906, 0x0099e914, 0x81018962,
	0x7397131d, 0x73485afd, 0x00026402, 0x81038a43, 0x3bf72803, 0x7152da22, 0x00050faa, 0x810567f5,
	0x01044607, 0x7f02864b, 0x004bc14b, 0x81027909, 0x01be9104, 0x7f3b4f46, 0x37be065b, 0x6dc9aea8,
	0xa4010e10, 0x970f72d1, 0x03b82d19, 0x7f5b957f, 0x7f380932, 0x5b710564, 0x2dce4a23, 0x732bf357,
	0x00843405, 0x8102644a, 0x007d3aff, 0x81000cf0, 0x00fb1c98, 0x810151eb, 0x00497a08, 0x81271eb8,
	0xffcb3804, 0x81012e12, 0x3fba6438, 0x618ac581, 0xb6d20828, 0x754928d0, 0xe44f4116, 0x5d146d40,
	0x2e280707, 0x733c6941, 0x0247264e, 0x7f42f87a, 0x03701236, 0x7f0b9184, 0x0d79d905, 0x7f8ac4d2,
	0x0b8c032d, 0x7af94441, 0x00050577, 0x8101af1e, 0x0402a408, 0x8103adae, 0x77ec2408, 0x616671d3,
	0x07d81606, 0x7d1641c6, 0x209f1f08, 0x753a2833, 0x00a0109d, 0x8125eace, 0x6b1e2207, 0x714886df,
	0x0132137a, 0x7f2263a8, 0x276a5714, 0x7543e87a, 0xeff9116a, 0x7312df49, 0x1a7b07d5, 0x80fd79fd,
	0xb08a0b73, 0x67387b38, 0xc1fa0214, 0x910b12b8, 0x00dc4402, 0x810f1baa, 0x18f1061b, 0x75420848,
	0x00474d0f, 0x81031e9c, 0xc0d30475, 0x773d6ec3, 0xff86a50b, 0x5703f505, 0xd4d22a04, 0x6d2b2735,
	0x334f0d07, 0x6f5b1233, 0x0a502e67, 0x7b3b0191, 0x82cd4c0c, 0x5f7ef177, 0x008a3a03, 0x8702204f,
	0x700e16ad, 0x7b70a386, 0xff0d0505, 0x80ff9e40, 0x02fd608a, 0x7efcc9ed, 0x3a7b0336, 0x7cfd83f1,
	0xb3e61427, 0x2d4a473d, 0x526e0d68, 0x694f78da, 0x07bcb10c, 0x80f977d2, 0x006a3615, 0x8106e7b9,
	0xcdca1930, 0x9731030e, 0x224a3c08, 0x717ef29c, 0xebde1e62, 0x270690f9, 0xb7772653, 0x6d3baad1,
	0x00f0120a, 0x8101b0ee, 0xff89300e, 0x80dad31a, 0x3b07151e, 0x73437cd7, 0x15333726, 0x773ec056,
	0x00125f11, 0x81559a7a, 0xe8730a37, 0x830e935f, 0x00e77c25, 0x81225992, 0x768a4e0c, 0x4f821966,
	0x22350681, 0x80f9d9ac, 0x0baeb409, 0x7b2746d9, 0x5a05590b, 0x618db96b, 0x00981c71, 0x81018f34,
	0x0178e409, 0x7efd8f9f, 0x7789d90b, 0x5f860eac, 0x7ed90a11, 0x578176a7, 0xfb24082a, 0x8305152e,
	0x02c17309, 0x7f33834c, 0x003b0c5e, 0x8301bab0, 0x65bc1868, 0x655eb187, 0xf8930e54, 0x7706bb41,
	0x00bda030, 0x81012dd5, 0xb63d0541, 0x9b49275b, 0xeefb5c0e, 0x7313feef, 0x2aae6107, 0x6d5de873,
	0x003a0f18, 0x810325d0, 0x20012803, 0x850b7e43, 0xb4990c7b, 0x694aaf4b, 0xe7cb0803, 0x7d19b4ea,
	0x004413d3, 0x8301b681, 0x00b95818, 0x810186d0, 0x37946762, 0x657ffd2c, 0xff4d5202, 0x80f54030,
	0x017aa314, 0x8104fd77, 0x4fad540f, 0xc8b2dd3b, 0x425a0a3e, 0x69bba38f, 0x0ba8061b, 0x7b325dd3,
	0x41e0185f, 0x67b9d486, 0xff510808, 0x7f0314b1, 0x00c5035b, 0x8102ebba, 0xffc6940c, 0x6cfee4dc,
	0x0a0d3d06, 0x8309f858, 0x5eb73a09, 0x534e1527, 0xbb913016, 0x85451eef, 0xfc40190e, 0x6503a682,
	0xe13f1c0b, 0x87120307, 0x46c10426, 0x714e901e, 0x00091057, 0x81030e72, 0x292f2147, 0x6dd43b9d,
	0x9643a009, 0x5f6b4f1f, 0x0043540c, 0x81032f64, 0x8b7e4c09, 0x3b651d5b, 0x00787a0b, 0x81025bb7,
	0x502e1e3e, 0x6dae46f4, 0x3d5b3514, 0x63765065, 0x00ca5008, 0x81035ee3, 0x01f20f75, 0x7f01f724,
	0x8bde152d, 0x75613340, 0x09036504, 0x8303c843, 0x9a94142e, 0x5f5aef87, 0x1ed70b1e, 0x774307d9,
	0x9c06105b, 0x5353a713, 0x005c0b1f, 0x8106ea38, 0xe9515e16, 0x2d16734e, 0x0802ab11, 0x80fbee50,
	0xfbd30e22, 0x7af1d67f, 0xc30f0c74, 0x693b351d, 0xfd8e3c12, 0x6903af29, 0x00e79e36, 0x81007371,
	0x35b34e19, 0x6778dafe, 0x1a11b614, 0x7743b58a, 0x0201410b, 0x7efeb5b8, 0xec6e411d, 0x6513ad2d,
	0xda895a1b, 0x9123faf7, 0x4dd43b1a, 0x5b779323, 0x03420a7a, 0x80ff964b, 0x649b2e10, 0x655e5232,
	0x0ae64111, 0x7b2ec648, 0xba6f060c, 0x86fb0d33, 0x567e1cb4, 0x558a8f10, 0xebca1205, 0x6517136d,
	0x130a370e, 0x76fa6f5f, 0x2010a41e, 0x7341de7e, 0xefca1701, 0x88cd2a11, 0x00935d05, 0x8101a06a,
	0x00e60627, 0x81036b11, 0x00e006d6, 0x8105eac5, 0x1d936516, 0x7731d670, 0x02e1870d, 0x7f032d16,
	0xbe961137, 0x613ed891, 0xec4c1c31, 0x6912bf50, 0x8fdb0b0e, 0x71591ad5, 0xa371072c, 0x6f58e6f5,
	0x00070531, 0x81035f23, 0x00421a8c, 0x8103d99a, 0xb4e40a06, 0x8d19d926, 0x00b78728, 0x810e20a2,
	0xea063b80, 0x6913fef6, 0x00540341, 0x8101846e, 0xee9c0c20, 0x29128665, 0xb41e2709, 0x6f489756,
	0xef480e8b, 0x810f1501, 0xb48c4413, 0x494b5304, 0x60464509, 0x7f55cef9, 0x97e7173a, 0x675878e6,
	0x1775081d, 0x754b7b07, 0x7078320f, 0x5f6ab433, 0x06ef153e, 0x7f1f56c2, 0x8d75121c, 0x5f56a7ce,
	0xe6f72883, 0x7b18e732, 0xff4c2716, 0x81029b00, 0x73b2c412, 0x7978cd6a, 0xfd7c0721, 0x8100e0fd,
	0xce162647, 0x672ea360, 0xde6a120f, 0x7921cf14, 0x00e03c21, 0x81032b81, 0x673c470a, 0x599a0af8,
	0x122c08be, 0x7d2ba277, 0xff9e300b, 0x8102c318, 0x3bbe8321, 0x63c4cd5c, 0x001b1a3b, 0x81025bb2,
	0x00002605, 0x8105b730, 0x02783c07, 0x7efe7d3f, 0xb6562e16, 0x8149292d, 0x505a3b0a, 0x693dface,
	0x1f971939, 0x7164e13d, 0x09110555, 0x7f17592b, 0x06a96006, 0x81019ba9, 0x65d51016, 0x7b65393b,
	0xcdc80905, 0x7933254c, 0xb67f6808, 0x4349e4a6, 0xa3fc3846, 0x6b43e10e, 0xbd712f06, 0x63422abc,
	0x21f2562f, 0x6f909ba1, 0x0290e30a, 0x7f057c77, 0x01b69513, 0x810177b9, 0xb1134162, 0x6d3bfecd,
	0x1bec3b0e, 0x7728ff4a, 0xf5890a2f, 0x8308e318, 0x0d414f12, 0x850b8f53, 0xfe7b0312, 0x48fa212d,
	0x8f850973, 0x8f29c2f4, 0x098b04a4, 0x7efd3e43, 0x0db32257, 0x7b2dc98c, 0x52883e02, 0x6d388b45,
	0x61682e19, 0x659e4999, 0x12ad166a, 0x7748cb49, 0xaa444607, 0x71431542, 0xff02061d, 0x810353ce,
	0x5a0b1828, 0x59a27ad2, 0x02874f10, 0x830a7852, 0x5d110427, 0x7561012a, 0xee3f840a, 0x7712aaf1,
	0x0003e119, 0x810fd45d, 0xa530520b, 0x5d5ad291, 0x05160747, 0x7eff6935, 0x000f8ef8, 0x810029c2,
	0xe13c0a14, 0x8d1e26c2, 0x5f3d3f04, 0x6f56faaf, 0x4c8da314, 0x6776667e, 0xfc2a0804, 0x7d01b2f5,
	0xe7bf2017, 0x591a8ed1, 0x00a3a00e, 0x8101d2ba, 0xa39c0d16, 0x415e1abb, 0xff06230c, 0x4701d095,
	0x030b1d98, 0x7f0cb32f, 0x003e5806, 0x8112e8ae, 0xff841006, 0x81034db8, 0xff7b103e, 0x7f02cc9a,
	0x3dfa2e0c, 0x6d617b57, 0xe9347404, 0x6716f900, 0x02fb7e65, 0x81008fcb, 0x00760ddb, 0x81025ed3,
	0x00a53512, 0x8110e979, 0x00fd2f05, 0x81017964, 0xa1d31128, 0x475e5ab8, 0x00f6f00f, 0x81017995,
	0xe9646a15, 0x0b16ccc6, 0x00472731, 0x8101bcbc, 0xdc0d0856, 0x7522f4c0, 0x72900b8c, 0x6758ab71,
	0x04c125d6, 0x7f2a0495, 0x58606611, 0x558244fa, 0x3631030b, 0x753c6114, 0xd2050407, 0x7b29b319,
	0x79ff0810, 0x9cdac749, 0x00870727, 0x8126eca3, 0x99206a10, 0x614e9a92, 0x0072410a, 0x8102793b,
	0x025e3c09, 0x7f0e39b9, 0xff040930, 0x78fe3d25, 0x57e52ebc, 0x5582e32a, 0x00bd4109, 0x8103390d,
	0x6829141a, 0x5d920d66, 0x03687a2c, 0x7f1e4999, 0x0052180a, 0x810334e2, 0xc3031309, 0x6d3b62ff,
	0x07dd0f6e, 0x7d3ab53d, 0x91891c07, 0x834d1d18, 0x58636228, 0x6757c288, 0xf5f92009, 0x57092b5a,
	0xa9971f0f, 0x67475891, 0x303c2302, 0x81098dcc, 0x00ab5c1d, 0x811b119f, 0x004f4e3b, 0x8100f485,
	0x00e37919, 0x8105c544, 0xe2f51605, 0x7b1d4b49, 0x00f27930, 0x8100b182, 0x059b35c1, 0x7d52f2e5,
	0x8e845329, 0x51727097, 0x1488246f, 0x77d62b17, 0x4cae1026, 0x69530593, 0xff0a8b04, 0x81024e21,
	0xa9041a4c, 0x6b3fbb18, 0x0a0d24a1, 0x7b52531e, 0xa4867416, 0x674af101, 0x32182618, 0x7344bcce,
	0xba4e6119, 0x5d46e8cd, 0x701e1208, 0x5f5f1ee6, 0xb2eb2532, 0x5b4700fe, 0x007c0e05, 0x8101aedf,
	0x30759e0c, 0x71491f58, 0x00c83419, 0x81026129, 0xd5882005, 0x632a6c43, 0xfffb1074, 0x8102a4de,
	0x15493925, 0x75424683, 0xac45c10e, 0x654ea6dc, 0x92c73d37, 0x5b5e808f, 0x87852596, 0x5d56cade,
	0xee840b4d, 0x6d120b06, 0xff231110, 0x7b01c8f9, 0x416e4816, 0x5f6eccd1, 0xbf504227, 0x6736daf9,
	0x00ca2009, 0x813e1913, 0x006f0ee9, 0x810119db, 0xfe84060e, 0x7f01b513, 0x6c82092f, 0x7568ef11,
	0x562e0429, 0x6f45fec6, 0xb7c31e0f, 0x654b8091, 0xffb70b13, 0x7b0220e7, 0x00745e17, 0x8100a56d,
	0x01e1bb4b, 0x8100b1fe, 0x298e0714, 0x73531172, 0xff83083a, 0x8101bf01, 0xe3c13e0b, 0x7d19cb0e,
	0xc4465332, 0x6b32aca0, 0x7bb70d5c, 0x576e28af, 0x80f8071e, 0x5b5b5715, 0xa7340c35, 0x6558b75b,
	0x34af206a, 0x6d521caa, 0x013d781d, 0x81024307, 0x12d82f1a, 0x7b3a7658, 0x08fc133c, 0x851b7493,
	0x3f721b04, 0x714685dd, 0x0049a841, 0x8100e9c2, 0x9bdc0620, 0x6f3882d7, 0x00477457, 0x8100760d,
	0x01490414, 0x7f2ddf05, 0x543f041c, 0x7342e1e6, 0xa071071b, 0x69561f05, 0x31c4a90c, 0x7b26250c,
	0x19781102, 0x83230a44, 0x2bed0b0e, 0x7d614f41, 0x2fc10a03, 0x82fd8dcb, 0x006e1407, 0x810a28fd,
	0xff5a0476, 0x80fe1c31, 0x41365d0e, 0x6b5246b1, 0x4d285d12, 0x67523abd, 0x7e303a0d, 0x6552b94d,
];

// fits a gaussian splat
fn fit_image<P: AsRef<Path>>(path: P) {
	let reference = image::open(path).unwrap().into_rgb8();

	assert_eq!(reference.width() as usize, WIDTH);
	assert_eq!(reference.height() as usize, HEIGHT);

	let reference = reference.into_raw();

	let mut rng = rand::thread_rng();

	let mut data: [Splat; SPLATS] = bytemuck::cast_slice(&DATA).try_into().unwrap();

	// rng.fill_bytes(bytemuck::cast_slice_mut(&mut data));

	let mut difference = 1e20;
	let threshold = 13000.0;

	let mut stdout = std::io::stdout().lock();

	while difference > threshold {
		let new_data = modify(&mut rng, &data);
		let new_image = render_image(bytemuck::cast_slice(&new_data));
		let new_difference = compute_mse(&new_image, &reference);

		if new_difference <= difference {
			data = new_data;
			difference = new_difference;

			let image = render_image(bytemuck::cast_slice(&new_data));
			let image = image::RgbImage::from_vec(WIDTH as u32, HEIGHT as u32, image.to_vec()).unwrap();

			image
				.write_to(
					&mut std::fs::File::create("best.png").unwrap(),
					image::ImageFormat::Png,
				)
				.unwrap();
		}

		writeln!(stdout, "Difference: {}", difference).unwrap();
	}

	let image = render_image(bytemuck::cast_slice(&data));
	let image = image::RgbImage::from_vec(WIDTH as u32, HEIGHT as u32, image.to_vec()).unwrap();

	image
		.write_to(
			&mut std::fs::File::create("output.png").unwrap(),
			image::ImageFormat::Png,
		)
		.unwrap();

	std::fs::write("output.bin", bytemuck::cast_slice(&data)).unwrap();
}

fn main() {
	fit_image("input.jpg");
}
